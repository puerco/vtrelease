// Code generated by counterfeiter. DO NOT EDIT.
package envfakes

import (
	"sync"

	"github.com/puerco/vtrelease/pkg/env"
)

type FakeEnvImplementation struct {
	CheckoutBranchStub        func(*env.Options) error
	checkoutBranchMutex       sync.RWMutex
	checkoutBranchArgsForCall []struct {
		arg1 *env.Options
	}
	checkoutBranchReturns struct {
		result1 error
	}
	checkoutBranchReturnsOnCall map[int]struct {
		result1 error
	}
	GetRepoTagsStub        func(*env.Options) ([]string, error)
	getRepoTagsMutex       sync.RWMutex
	getRepoTagsArgsForCall []struct {
		arg1 *env.Options
	}
	getRepoTagsReturns struct {
		result1 []string
		result2 error
	}
	getRepoTagsReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeEnvImplementation) CheckoutBranch(arg1 *env.Options) error {
	fake.checkoutBranchMutex.Lock()
	ret, specificReturn := fake.checkoutBranchReturnsOnCall[len(fake.checkoutBranchArgsForCall)]
	fake.checkoutBranchArgsForCall = append(fake.checkoutBranchArgsForCall, struct {
		arg1 *env.Options
	}{arg1})
	stub := fake.CheckoutBranchStub
	fakeReturns := fake.checkoutBranchReturns
	fake.recordInvocation("CheckoutBranch", []interface{}{arg1})
	fake.checkoutBranchMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeEnvImplementation) CheckoutBranchCallCount() int {
	fake.checkoutBranchMutex.RLock()
	defer fake.checkoutBranchMutex.RUnlock()
	return len(fake.checkoutBranchArgsForCall)
}

func (fake *FakeEnvImplementation) CheckoutBranchCalls(stub func(*env.Options) error) {
	fake.checkoutBranchMutex.Lock()
	defer fake.checkoutBranchMutex.Unlock()
	fake.CheckoutBranchStub = stub
}

func (fake *FakeEnvImplementation) CheckoutBranchArgsForCall(i int) *env.Options {
	fake.checkoutBranchMutex.RLock()
	defer fake.checkoutBranchMutex.RUnlock()
	argsForCall := fake.checkoutBranchArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEnvImplementation) CheckoutBranchReturns(result1 error) {
	fake.checkoutBranchMutex.Lock()
	defer fake.checkoutBranchMutex.Unlock()
	fake.CheckoutBranchStub = nil
	fake.checkoutBranchReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEnvImplementation) CheckoutBranchReturnsOnCall(i int, result1 error) {
	fake.checkoutBranchMutex.Lock()
	defer fake.checkoutBranchMutex.Unlock()
	fake.CheckoutBranchStub = nil
	if fake.checkoutBranchReturnsOnCall == nil {
		fake.checkoutBranchReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.checkoutBranchReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEnvImplementation) GetRepoTags(arg1 *env.Options) ([]string, error) {
	fake.getRepoTagsMutex.Lock()
	ret, specificReturn := fake.getRepoTagsReturnsOnCall[len(fake.getRepoTagsArgsForCall)]
	fake.getRepoTagsArgsForCall = append(fake.getRepoTagsArgsForCall, struct {
		arg1 *env.Options
	}{arg1})
	stub := fake.GetRepoTagsStub
	fakeReturns := fake.getRepoTagsReturns
	fake.recordInvocation("GetRepoTags", []interface{}{arg1})
	fake.getRepoTagsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEnvImplementation) GetRepoTagsCallCount() int {
	fake.getRepoTagsMutex.RLock()
	defer fake.getRepoTagsMutex.RUnlock()
	return len(fake.getRepoTagsArgsForCall)
}

func (fake *FakeEnvImplementation) GetRepoTagsCalls(stub func(*env.Options) ([]string, error)) {
	fake.getRepoTagsMutex.Lock()
	defer fake.getRepoTagsMutex.Unlock()
	fake.GetRepoTagsStub = stub
}

func (fake *FakeEnvImplementation) GetRepoTagsArgsForCall(i int) *env.Options {
	fake.getRepoTagsMutex.RLock()
	defer fake.getRepoTagsMutex.RUnlock()
	argsForCall := fake.getRepoTagsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeEnvImplementation) GetRepoTagsReturns(result1 []string, result2 error) {
	fake.getRepoTagsMutex.Lock()
	defer fake.getRepoTagsMutex.Unlock()
	fake.GetRepoTagsStub = nil
	fake.getRepoTagsReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeEnvImplementation) GetRepoTagsReturnsOnCall(i int, result1 []string, result2 error) {
	fake.getRepoTagsMutex.Lock()
	defer fake.getRepoTagsMutex.Unlock()
	fake.GetRepoTagsStub = nil
	if fake.getRepoTagsReturnsOnCall == nil {
		fake.getRepoTagsReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.getRepoTagsReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeEnvImplementation) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.checkoutBranchMutex.RLock()
	defer fake.checkoutBranchMutex.RUnlock()
	fake.getRepoTagsMutex.RLock()
	defer fake.getRepoTagsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeEnvImplementation) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ env.EnvImplementation = new(FakeEnvImplementation)
